# STEPS LEVEL TEMPLATE:
# Used to build Lua
# Reusable
# Used to "hide" the additional variables specific to this SDK which shouldn't be set from a higher level, or
#   shared from a multi-build pipeline like a publish

parameters:
- name: ApiSpecSource
  displayName: ApiSpecSource
  type: string
  default: -apiSpecGitUrl https://raw.githubusercontent.com/PlayFab/API_Specs/master/
- name: CommitMessage
  displayName: CommitMessage
  type: string
  default: Automated build from ADO Pipeline
- name: GitDestBranch
  displayName: GitDestBranch
  type: string
  default: doNotCommit
- name: SdkName
  displayName: SdkName
  type: string
  default: LuaSDK
- name: GitJSetupBranch
  displayName: GitJSetupBranch
  type: string
  default: master
- name: GitSdkGenBranch
  displayName: GitSdkGenBranch
  type: string
  default: master
- name: isVersioned
  displayName: isVersioned
  type: boolean
  default: false
- name: BuildCorona
  displayName: BuildCorona
  type: boolean
  default: true
- name: SelfTemplateResource
  displayName: SelfTemplateResource
  type: string
  default: self

steps:
- checkout: JenkinsSdkSetupScripts
  clean: true
  path: s
- checkout: API_Specs
  clean: true
  path: s/API_Specs
- checkout: SdkGenerator
  clean: true
  path: s/SdkGenerator
- checkout: ${{ parameters.SelfTemplateResource }}
  clean: true
  submodules: true
  path: s/sdks/LuaSDK
  persistCredentials: true
- bash: |
    set -e
    
    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkName="${{ parameters.SdkName }}"
    BuildCorona="${{ parameters.BuildCorona }}"
    WORKSPACE=$(pwd -W)
    # Hack attempt to get WORKSPACE into a sub-environment
    export WORKSPACE="$WORKSPACE"
    
    echo === load util.sh to find msbuild ===
    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/util.sh"
    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/testInit.sh"
    
    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    . ./shared_build.sh

    echo === Execute $SdkName UnitTests ===
    cd "$WORKSPACE\\sdks\\$SdkName\\PlayFabClientSDK"
    # TODO: Install/Get Lua. This does not work: sudo apt-get install lua5.2
    # Execute the test
    # lua PlayFabTesting/TestPlayFabConsole.lua

    nuget restore JenkinsConsoleUtility.sln

    echo === Build JenkinsConsoleUtility ===
    Find2019MsBuild || Find2017MsBuild
    "$MSBUILD_EXE" "$WORKSPACE//SDKGenerator//JenkinsConsoleUtility//JenkinsConsoleUtility.sln" //p:configuration="Debug" //p:platform="Any CPU" //t:Rebuild
    cd "$WORKSPACE//SDKGenerator//JenkinsConsoleUtility"
    echo TODO: run this once lua is installed correctly - ListenCsJCU

    if [ $TestServer = true ]; then
      echo === testing server ===
      cd "$WORKSPACE/sdks/$SdkName/PlayFabServerSDK"
      ./deploy.sh
    fi

    if [ $isVersioned = true ]; then
      echo === Build Defold Zips ===
      cd "$WORKSPACE\sdks\LuaSdk\_Build\Defold"
      cmd <<< ./BuildDefoldZips.bat
    fi
  displayName: 'Build/Test/Report'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'
    testRunTitle: LuaTemplate
